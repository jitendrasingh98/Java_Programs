############################      OOPs         ########################

OOPs -> Object Oriented Programming System
-> OOP a methodology or paradigm to design a program using classes and objects.
-> It simplifies software development and maintenance.
-> OOPs provides some concepts :
1. Class
2. Objects

4 Pillars of OOPs
3.Inheritance
4. Abstraction
5. Polymorphism
6. Encapsulation

*****************                   Class                      *********************
-> Collection of Object which have same properties.
-> It is a logical entity.
-> Class is a user define data type which defines its properties and its functions.class is the only representation of the data.
-> Class does not occupy any memory space.
-> A java class contain :
      -> Fields or Data Member
      -> Methods
      -> Constructor
      -> Nested Class
      -> Interface


*******************      Object    ******************

->Object is a run time entity.
->blue print of a class.
->When the object is created using new keyword, then space is allocated for the variable in a heap and the starting
address is a stored in the stack memory.
Object Contains :
1. State -> Represent data of an object //attributes
2. Behavior > Represent Methods od an Object
3. Identity -> Gives unique name to an object
-> syntax: className object = new ClassName();

***********************       Constructor      **************************

-> Constructor is block of code similar to the method.
-> Constructor is a special method which is invoked automatically at the time of object creation.
-> It is used to initialize the data members of new object generally.
-> Constructor have the same name as class.
-> Does not have a return type(not even void).
-> Constructor are only called once,at object creation.
-> It is called constructor because it construct a value at the time of object creation.
-> There can be multiple constructors in the same class, this concept is known as constructor overloading.
---> 3 types of Constructor--->
1.Default Constructor
2.No-Arguments Constructor
3.Parameterized Constructor

1.Default Constructor :
-> If we not create any constructor in the class , Java provides a default constructor that initialize the object.
-> Automatically created by compiler.
-> Doesn't have any parameter.
-> same as No-Args Constructor.
-> Default constructor provides the default value to the object.
    String->null     int->0
Example:
class Student{
   String name;
   int age;
}
public class Main{
 public  static void main(String[] args){
     //default constructor invoke here
     Student st = new Student();
     System.out.println(st.name+" "+st.age);//output : null 0
     }
 }


2.Non-Parameterized Constructor:
-> A Constructor which has no argument
-> It is invoked at the time of creation an object.
-> If we don't create one then its created by default by java.
-> Same as Default constructor.
Example:
class Student{
   String name;
   int age;
   Student(){
       name="Jitu";
       age=26;
   }
}
public class Main{
 public  static void main(String[] args){

     Student st = new Student();
     System.out.println(st.name+" "+st.age);//output : Jitu 26
     }
 }
3.Parameterized Constructor
-> A constructor with one or more arguments/ parameters is called Parametrized Constructor.
-> Provides different values to distinct object.
-> If we need to initialize fields of the class with our own values, then use a parameterized constructor.
Example:
class Student {
    String name;
    int age;

    Student(String name, int age) {
        this.name = name;
        this.age = age;
    }
}

public class Main {
    public static void main(String[] args) {
        Student st = new Student("Jitu", 26);
        System.out.println(st.name + " " + st.age);
    }
}

Constructor not supported by Java
1.Copy Constructor :
-> Java does not have a built-in copy constructor like C++,
   but you can create one by defining a constructor that takes an object of the same class.
Example:
class Dog {
    String name;
    int age;
    // Parameterized constructor
    Dog(String name, int age) {
        this.name = name;
        this.age = age;
    }
    // Copy constructor
    Dog(Dog dog) {
        this.name = dog.name;
        this.age = dog.age;
    }
}
public class Main {
    public static void main(String[] args) {
        Dog originalDog = new Dog("Buddy", 3);
        Dog copiedDog = new Dog(originalDog);
        System.out.println(copiedDog.name);  // Output: Buddy
        System.out.println(copiedDog.age);   // Output: 3
    }
}

2.Static Constructor:
-> Java does not have static constructors in the same sense as languages like C#. However,
   you can use a static block to initialize static fields.
Example:
class Dog {
    static int dogCount;
    static {
        dogCount = 0; // Static initializer block
    }
    Dog() {
        dogCount++;
    }
    static int getDogCount() {
        return dogCount;
    }
}
public class Main {
    public static void main(String[] args) {
        Dog dog1 = new Dog();
        Dog dog2 = new Dog();
        System.out.println(Dog.getDogCount());  // Output:  2
    }
}


 ####  Constructor Overloading  ####
-> Constructor overloading in Java refers to the ability to define multiple constructors within the same class,
   each having different parameter lists.
-> This allows objects of the class to be initialized in different ways based on the arguments passed.
Key Points of Constructor Overloading:
1.Same Name: All overloaded constructors must have the same name as the class.
2.Different Parameter Lists: They must differ in the type, number, or order of parameters.
Example:
// Creating a Student Class
class Student {
  String name;
  int age;

  // no-args constructor
  Student() {
    this.name = "Jitu";
    this.age = 2;
  }

  // parameterized constructor having one parameter
  Student(String name) {
    this.name = name;
   this.age = 0;//default value
  }

  // parameterized constructor having both parameters
  Student(String name, int age) {
    this.name = name;
    this.age = age;
  }

 // Method to display student details
  public void printDetails() {
    System.out.println("Name : " + this.name);
    System.out.println("Age : " + this.age);
  }
}

public class Main {
  public static void main(String[] args) {
    Student std1 = new Student(); // invokes no-args constructor
    Student std2 = new Student("Jordan"); // invokes parameterized constructor
    Student std3 = new Student("Paxton", 25); // invokes parameterized constructor

    // Printing details
    System.out.println("Student 1:");
    std1.printDetails();
    System.out.println();//for new line

    System.out.println("Student 2:");
    std2.printDetails();
    System.out.println();//for new line

    System.out.println("Student 3:");
    std3.printDetails();
  }
}




********************      Inheritance    ***********************

-> When one Object acquires all the properties and behavior of parent object ,it id known
   as Inheritance.
-> Followed IS-A Relationship also known as parent-child Relationship.

Inheritance provides:
-> Method Overriding -> To achieve Runtime Polymorphism
-> Code Reusability

Terminology used in Inheritance:
Class:
-> A class is a group of objects which have common properties.
-> It is a template or blueprint from which objects are created.
Sub Class/Child Class:
-> Subclass is a class which inherits the other class.
-> It is also called a derived class, extended class, or child class.
Super Class/Parent Class:
-> Superclass is the class from where a subclass inherits the features.
-> It is also called a base class or a parent class.
Reusability:
-> Reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class.
-> You can use the same fields and methods already defined in the previous class.

syntax:
class Subclass-name extends Superclass-name
 {
   //methods and fields
 }
-> The extends keyword indicates that you are making a new class that derives from an existing class.
-> The meaning of "extends" is to increase the functionality.

Types of Inheritance:
1.Single Inheritance
2.Multilevel Inheritance
3.Hierarchical Inheritance
4.Multiple Inheritance -> Not Supported by Java but we can achieve through Interfaces.
5.Hybrid Inheritance

1. Single Inheritance:
-> a sub-class is derived from only one super class.
-> It inherits the properties and behavior of a single-parent class.
-> ALso known as simple inheritance.
Example:
//parents class
class Parent {

    // parent class method
    void show() {
        System.out.println("This is Parent Class.");
    }
}
class Child extends Parent{
    void display(){
        System.out.println("This is child class");
    }
}
    public class SimpleInheritance  {
        public static void main(String[] args) {
            //create object of child class
            Child child = new Child();
            child.show();//calling parent method
            child.display();
        }
    }

2.Multilevel Inheritance :
-> a derived class will be inheriting a base class,
   and as well as the derived class also acts as the base class for other classes.
Example:
   //parent class know as super class
   class A{
       void show(){
           System.out.println("This is parent class.");
       }
   }

   // child class know as subclass -> base/parent class for C
   class B extends A{
       void display(){
           System.out.println("This is child class.");
       }
   }

   //grand child class - subclass of child class
   class C extends B{
       void print(){
           System.out.println("This is grand child class");
       }
   }

   public class MultiLevelInheritance {
       public static void main(String[] args) {
           C c = new C();
           c.show();//accessing super class method
           c.display();//accessing method of parent class of C
           c.print();
       }
   }

3.Hierarchical Inheritance:
-> ne class serves as a superclass (base class) for more than one subclass.
Example:
package OOPS.Inheritance;

//parent class - super class
class Animal{
   void show(){
       System.out.println("Super Class");
   }
}

//subclass1
class Dog extends Animal{
    void bark(){
        System.out.println("Barking");
    }
}

//child class2 - subclass2
class Cat extends Animal{
    void meow(){
        System.out.println("Meowing");
    }
}
public class HierarchicalInheritance {
    public static void main(String[] args) {
        //create method of first child class
        Dog d = new Dog();

        d.show();//accessing parent class method
        d.bark();

        //second subclass object
        Cat c =new Cat();
        c.show();// accessing parent class method
        c.meow();
    }
}


4.Multiple Inheritance (Through Interfaces):
-> one class can have more than one superclass and inherit features from all parent classes.
-> Java does not support multiple inheritances with classes.
-> In Java, we can achieve multiple inheritances only through Interfaces.
Example:
// Define the first interface
interface CanFly {
    void fly();
}
// Define the second interface
interface CanSwim {
    void swim();
}
// Class that implements both interfaces
class Duck implements CanFly, CanSwim {
    @Override
    public void fly() {
        System.out.println("The duck is flying.");
    }
    @Override
    public void swim() {
        System.out.println("The duck is swimming.");
    }
}

public class MultipleInheritanceThroughInterface {
    public static void main(String[] args) {
        Duck duck = new Duck();
        duck.fly();
        duck.swim();
    }
}

5.Hybrid Inheritance
->It is a mix of two or more types of inheritance.
In java:
-> Mix of Single and Multilevel
-> Mix of Single and Hierarchical
-> Mix of Multilevel and Hierarchical
-> Mix of all three
Example:
// Base class
class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

// Intermediate class
class Bird extends Animal {
    void fly() {
        System.out.println("The bird is flying.");
    }
}

// Derived class that extends Bird
class Duck extends Bird {
    void quack() {
        System.out.println("The duck is quacking.");
    }
}

// Main class to test the Duck class
public class Main {
    public static void main(String[] args) {
        Duck duck = new Duck();
        duck.eat();  // Inherited from Animal
        duck.fly();  // Inherited from Bird
        duck.quack(); // Specific to Duck
    }
}

Disadvantages of Inheritance
Complexity:
-> Inheritance can make the code more complex and harder to understand.
Tight Coupling:
-> Inheritance creates a tight coupling between the superclass and subclass,
   making it difficult to make changes to the superclass without affecting the subclass.



********************    Polymorphism    ***************************

->one name many form
two types of polymorphism ..
1.Compile Time Polymorphism -->function overloading
->Same function name with different return type or arguments.
example:
public void print(String name){sout(name);}
public void print(int age){sout(age);}

2.Run Time polymorphism -->function overriding

