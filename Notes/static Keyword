-> In Java, if we want to access class members, we must first create an instance of the class.
   But there will be situations where we want to access class members without creating any variables.
   In those situations, we can use the static keyword in Java.
   If we want to access class members without creating an instance of the class, we need to declare the class members static.

-> The static keyword in Java is mainly used for memory management.
-> The static keyword in Java is used to share the same variable or method of a given class.
   The users can apply static keywords with variables, methods, blocks, and nested classes.
-> The static keyword is used for a constant variable or a method that is the same for every instance of a class.


1.Static Variables:
-> The static variable gets memory only once in the class area at the time of class loading.
-> When a variable is declared as static, then a single copy of the variable is created and shared among all objects at the class level.
->  Static variables are, essentially, global variables. All instances of the class share the same static variable.
-> Static variables can't be local.We can create static variables at the class level only.

Example:
class Demo{
    //static variable
    static  int num=25;

    //non static variable
    int num1=30;
}
public class StaticVariable {
    static int num3=65;//global / class level
    public static void main(String[] args) {
      //  static int num2=35;//static variable can't be local -> it will give an error
        Demo d = new Demo();
        System.out.println(num3);
        System.out.println("Non-Static Variable : "+d.num1);
        System.out.println("Static Variable : "+Demo.num);//static variables directly accessible with class name
    }
}

2.jo value multiple times use ho rhi ho use static bna dete hai memory save karne k liye
public class Student {
    int rollNo;
    String name;
    static String collegeName="GLA";
    Student(int rollNo, String name){
        this.rollNo = rollNo;
        this.name = name;
    }
 void display(){
     System.out.println("ROll No : "+rollNo+", Name : "+name+", College : "+collegeName);
 }

    public static void main(String[] args) {
        Student s1 = new Student(1,"Abhay");
        Student s2 = new Student(2,"Jitendta");
        s1.display();
        s2.display();
    }
}


2.Static Method:
-> When a method is declared with the static keyword, it is known as the static method.
-> The most common example of a static method is the main( ) method.
-> A static method belongs to the class rather than the object of a class.
-> A static method can be invoked without the need for creating an instance of a class.
-> A static method can access static data member and can change the value of it.
-> They cannot refer to this or super in any way.

Example:
1.static method within the same class example:
public class StaticMethod {
    //create static method
    static void display(){
        System.out.println("This is static method.");
    }

    public static void main(String[] args) {
        display();//call directly without create object of the class
    }
}

2.static method with another class
class Demo1{
    static void Display(){
        System.out.println("Static Method.");
    }
}
public class StaticMethod {
    public static void main(String[] args) {
        Demo1.Display();
    }
}

3. Static Block:
-> a static block is a block of code that gets executed when the class is loaded into memory.
-> The static block is executed only once when the class is loaded in memory.
-> A class can have multiple static blocks and each static block is executed in the same sequence in which they have been written in a program.
-> It is often used for initializing static variables or performing setup tasks that need to occur only once for the class.

Example:


public class StaticBlock {
    // static variables
    static int a = 23;
    static int b;
    static int max;

    // static blocks
    static {
        System.out.println("First Static block.");
        b = a * 4;
    }
    static {
        System.out.println("Second Static block.");
        max = 100;
    }

    // static method
    static void display() {

        System.out.println("a = " + a);
        System.out.println("b = " + b);
        System.out.println("max = " + max);
    }

    public static void main(String[] args) {
        display();
    }
}

4.Static Classes
-> A class can be made static only if it is a nested class.
   We cannot declare a top-level class with a static modifier but can declare nested classes as static.
-> Nested static class doesnâ€™t need a reference of Outer class.
   In this case, a static class cannot access non-static members of the Outer class.

   Example:
   public class GFG {
       private static String str = "GeeksforGeeks";

       // Static class
       static class MyNestedClass {

           // non-static method
           public void display(){
             System.out.println(str);
           }
       }
       public static void main(String args[])
       {
           GFG.MyNestedClass obj
               = new GFG.MyNestedClass();
           obj.display();
       }
   }